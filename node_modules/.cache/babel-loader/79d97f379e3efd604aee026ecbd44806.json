{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from 'react';\nimport * as styles from '../styles/SweetAlertStyles';\nimport { actions as actionsStyle } from \"../styles/SweetAlertStyles\";\n\nvar Buttons =\n/** @class */\nfunction (_super) {\n  __extends(Buttons, _super);\n\n  function Buttons() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buttonStyles = {};\n    _this.confirmButtonElement = null;\n    _this.cancelButtonElement = null;\n\n    _this.setConfirmButtonElementRef = function (element) {\n      _this.confirmButtonElement = element;\n    };\n\n    _this.setCancelButtonElementRef = function (element) {\n      _this.cancelButtonElement = element;\n    };\n\n    _this.getButtonStyle = function (bsStyle) {\n      if (bsStyle === 'error') bsStyle = 'danger';\n\n      if (_this.buttonStyles[bsStyle] == null) {\n        var style = Buttons.styles[bsStyle] || Buttons.styles.default;\n        _this.buttonStyles[bsStyle] = {\n          borderColor: \"\" + style.borderColor,\n          boxShadow: \"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px \" + style.shadowColor\n        };\n      }\n\n      return _this.buttonStyles[bsStyle];\n    };\n\n    return _this;\n  }\n\n  Buttons.prototype.componentDidMount = function () {\n    this.focusButton();\n  };\n\n  Buttons.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this; // when displaying back to back alerts React will treat this\n    // as an update to the same alert. this causes componentDidMount\n    // to not be called for the subsequent alerts. i hope to find a better\n    // way to handle this in the future, but for now i'm checking if the\n    // title, type, or button text has changed\n\n\n    if (prevProps.type !== this.props.type || prevProps.confirmBtnText !== this.props.confirmBtnText || prevProps.title !== this.props.title) {\n      setTimeout(function () {\n        return _this.focusButton();\n      }, 0);\n    }\n  };\n\n  Buttons.prototype.focusButton = function () {\n    if (this.props.focusCancelBtn && this.cancelButtonElement) {\n      try {\n        this.cancelButtonElement.focus();\n      } catch (e) {// whoops\n      }\n    } else if (this.props.focusConfirmBtn && this.confirmButtonElement) {\n      try {\n        this.confirmButtonElement.focus();\n      } catch (e) {// whoops\n      }\n    }\n  };\n\n  Buttons.prototype.confirmButtonRender = function () {\n    var _this = this;\n\n    if (!this.props.showConfirm) return false;\n    var confirmBtnBsStyle = this.props.confirmBtnBsStyle === 'error' ? 'danger' : this.props.confirmBtnBsStyle;\n    var confirmButtonStyle = Object.assign({}, styles.button, this.getButtonStyle(confirmBtnBsStyle), this.props.confirmBtnStyle || {});\n    /**\n     * These buttons are <a> anchor tags because for some reason React is triggering click events on <button>\n     * elements when an enter key event is fired from an input field in the alert.\n     * Please do not change this back to any other type of element.\n     */\n\n    return React.createElement(\"a\", {\n      ref: this.setConfirmButtonElementRef,\n      href: '#',\n      style: confirmButtonStyle,\n      className: \"btn btn-\" + this.props.btnSize + \" btn-\" + confirmBtnBsStyle + \" \" + this.props.confirmBtnCssClass + \" \" + (this.props.disabled ? 'disabled' : ''),\n      onClick: function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (!_this.props.disabled) {\n          _this.props.onConfirm();\n        }\n      }\n    }, this.props.confirmBtnText);\n  };\n\n  Buttons.prototype.cancelButtonRender = function () {\n    var _this = this;\n\n    if (!this.props.showCancel) return false;\n    var cancelBtnBsStyle = this.props.cancelBtnBsStyle === 'error' ? 'danger' : this.props.cancelBtnBsStyle;\n    var cancelButtonStyle = Object.assign({}, styles.button, this.props.cancelBtnStyle || {});\n    /**\n     * These buttons are <a> anchor tags because for some reason React is triggering click events on <button>\n     * elements when an enter key event is fired from an input field in the alert.\n     * Please do not change this back to any other type of element.\n     */\n\n    return React.createElement(\"a\", {\n      ref: this.setCancelButtonElementRef,\n      href: '#',\n      style: cancelButtonStyle,\n      className: \"btn btn-\" + this.props.btnSize + \" btn-\" + cancelBtnBsStyle + \" \" + this.props.cancelBtnCssClass,\n      onClick: function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        _this.props.onCancel();\n      }\n    }, this.props.cancelBtnText);\n  };\n\n  Buttons.prototype.render = function () {\n    if (!this.props.showConfirm && !this.props.showCancel) {\n      return false;\n    }\n\n    return React.createElement(\"p\", {\n      style: actionsStyle\n    }, this.props.customButtons ? this.props.customButtons : React.createElement(React.Fragment, null, !this.props.reverseButtons ? React.createElement(React.Fragment, null, this.cancelButtonRender(), this.confirmButtonRender()) : React.createElement(React.Fragment, null, this.confirmButtonRender(), this.cancelButtonRender())));\n  };\n\n  Buttons.defaultProps = {\n    confirmBtnText: 'OK',\n    confirmBtnBsStyle: 'primary',\n    confirmBtnCssClass: '',\n    confirmBtnStyle: {},\n    cancelBtnText: 'Cancel',\n    cancelBtnBsStyle: 'link',\n    cancelBtnCssClass: '',\n    cancelBtnStyle: {},\n    focusConfirmBtn: true,\n    focusCancelBtn: false,\n    showConfirm: true,\n    showCancel: false,\n    reverseButtons: false,\n    btnSize: 'lg'\n  };\n  Buttons.styles = {\n    primary: {\n      borderColor: '#286090',\n      shadowColor: 'rgb(165, 202, 234)'\n    },\n    success: {\n      borderColor: '#4cae4c',\n      shadowColor: 'rgba(76, 174, 76, 0.6)'\n    },\n    info: {\n      borderColor: '#46b8da',\n      shadowColor: 'rgba(70, 184, 218, 0.6)'\n    },\n    danger: {\n      borderColor: '#d43f3a',\n      shadowColor: 'rgba(212, 63, 58, 0.6)'\n    },\n    warning: {\n      borderColor: '#eea236',\n      shadowColor: 'rgba(238, 162, 54, 0.6)'\n    },\n    default: {\n      borderColor: '#cccccc',\n      shadowColor: 'rgba(204, 204, 204, 0.6)'\n    },\n    secondary: {\n      borderColor: '#cccccc',\n      shadowColor: 'rgba(204, 204, 204, 0.6)'\n    }\n  };\n  return Buttons;\n}(React.Component);\n\nexport default Buttons;","map":null,"metadata":{},"sourceType":"module"}