{"ast":null,"code":"var _jsxFileName = \"C:\\\\Windows\\\\System32\\\\apitest\\\\src\\\\Pagination.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchPageNumbers = () => {\n      const totalPages = this.totalPages;\n      const currentPage = this.state.currentPage;\n      const pageNeighbours = this.pageNeighbours;\n      /**\r\n       * totalNumbers: the total page numbers to show on the control\r\n       * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n       */\n\n      const totalNumbers = this.pageNeighbours * 2 + 3;\n      const totalBlocks = totalNumbers + 2;\n\n      if (totalPages > totalBlocks) {\n        const startPage = Math.max(2, currentPage - pageNeighbours);\n        const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n        let pages = range(startPage, endPage);\n        /**\r\n         * hasLeftSpill: has hidden pages to the left\r\n         * hasRightSpill: has hidden pages to the right\r\n         * spillOffset: number of hidden pages either to the left or to the right\r\n         */\n\n        const hasLeftSpill = startPage > 2;\n        const hasRightSpill = totalPages - endPage > 1;\n        const spillOffset = totalNumbers - (pages.length + 1);\n\n        switch (true) {\n          // handle: (1) < {5 6} [7] {8 9} (10)\n          case hasLeftSpill && !hasRightSpill:\n            {\n              const extraPages = range(startPage - spillOffset, startPage - 1);\n              pages = [LEFT_PAGE, ...extraPages, ...pages];\n              break;\n            }\n          // handle: (1) {2 3} [4] {5 6} > (10)\n\n          case !hasLeftSpill && hasRightSpill:\n            {\n              const extraPages = range(endPage + 1, endPage + spillOffset);\n              pages = [...pages, ...extraPages, RIGHT_PAGE];\n              break;\n            }\n          // handle: (1) < {4 5} [6] {7 8} > (10)\n\n          case hasLeftSpill && hasRightSpill:\n          default:\n            {\n              pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n              break;\n            }\n        }\n\n        return [1, ...pages, totalPages];\n      }\n\n      return range(1, totalPages);\n    };\n\n    this.gotoPage = page => {\n      const _this$props$onPageCha = this.props.onPageChanged,\n            onPageChanged = _this$props$onPageCha === void 0 ? f => f : _this$props$onPageCha;\n      const currentPage = Math.max(0, Math.min(page, this.totalPages));\n      const paginationData = {\n        currentPage,\n        totalPages: this.totalPages,\n        pageLimit: this.pageLimit,\n        totalRecords: this.totalRecords\n      };\n      this.setState({\n        currentPage\n      }, () => onPageChanged(paginationData));\n    };\n\n    this.handleClick = page => evt => {\n      evt.preventDefault();\n      this.gotoPage(page);\n    };\n\n    this.handleMoveLeft = evt => {\n      evt.preventDefault();\n      this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n    };\n\n    this.handleMoveRight = evt => {\n      evt.preventDefault();\n      this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n    };\n\n    const _props$totalRecords = props.totalRecords,\n          totalRecords = _props$totalRecords === void 0 ? null : _props$totalRecords,\n          _props$pageLimit = props.pageLimit,\n          pageLimit = _props$pageLimit === void 0 ? 30 : _props$pageLimit,\n          _props$pageNeighbours = props.pageNeighbours,\n          _pageNeighbours = _props$pageNeighbours === void 0 ? 0 : _props$pageNeighbours;\n\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0; // pageNeighbours can be: 0, 1 or 2\n\n    this.pageNeighbours = typeof _pageNeighbours === 'number' ? Math.max(0, Math.min(_pageNeighbours, 2)) : 0;\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n    this.state = {\n      currentPage: 1\n    };\n  }\n\n  render() {\n    if (!this.totalRecords || this.totalPages === 1) return null;\n    const currentPage = this.state.currentPage;\n    const pages = this.fetchPageNumbers();\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      \"aria-label\": \"Countries Pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, pages.map((page, index) => {\n      if (page === LEFT_PAGE) return React.createElement(\"li\", {\n        key: index,\n        className: \"page-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"page-link\",\n        href: \"#\",\n        \"aria-label\": \"Previous\",\n        onClick: this.handleMoveLeft,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"\\xAB\"), React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Previous\")));\n      if (page === RIGHT_PAGE) return React.createElement(\"li\", {\n        key: index,\n        className: \"page-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"page-link\",\n        href: \"#\",\n        \"aria-label\": \"Next\",\n        onClick: this.handleMoveRight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"\\xBB\"), React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Next\")));\n      return React.createElement(\"li\", {\n        key: index,\n        className: \"page-item\".concat(currentPage === page ? ' active' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"page-link\",\n        href: \"#\",\n        onClick: this.handleClick(page),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, page));\n    }))));\n  }\n\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\nexport default Pagination;","map":{"version":3,"sources":["C:/Windows/System32/apitest/src/Pagination.js"],"names":["React","Component","Fragment","PropTypes","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","constructor","props","fetchPageNumbers","totalPages","currentPage","state","pageNeighbours","totalNumbers","totalBlocks","startPage","Math","max","endPage","min","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","gotoPage","page","onPageChanged","f","paginationData","pageLimit","totalRecords","setState","handleClick","evt","preventDefault","handleMoveLeft","handleMoveRight","ceil","render","map","index","propTypes","number","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n}\r\n\r\nclass Pagination extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\r\n\r\n    // pageNeighbours can be: 0, 1 or 2\r\n    this.pageNeighbours = typeof pageNeighbours === 'number'\r\n      ? Math.max(0, Math.min(pageNeighbours, 2))\r\n      : 0;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n\r\n    this.state = { currentPage: 1 };\r\n  }\r\n    fetchPageNumbers = () => {\r\n\r\n        const totalPages = this.totalPages;\r\n        const currentPage = this.state.currentPage;\r\n        const pageNeighbours = this.pageNeighbours;\r\n    \r\n        /**\r\n         * totalNumbers: the total page numbers to show on the control\r\n         * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n         */\r\n        const totalNumbers = (this.pageNeighbours * 2) + 3;\r\n        const totalBlocks = totalNumbers + 2;\r\n    \r\n        if (totalPages > totalBlocks) {\r\n    \r\n          const startPage = Math.max(2, currentPage - pageNeighbours);\r\n          const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n    \r\n          let pages = range(startPage, endPage);\r\n    \r\n          /**\r\n           * hasLeftSpill: has hidden pages to the left\r\n           * hasRightSpill: has hidden pages to the right\r\n           * spillOffset: number of hidden pages either to the left or to the right\r\n           */\r\n          const hasLeftSpill = startPage > 2;\r\n          const hasRightSpill = (totalPages - endPage) > 1;\r\n          const spillOffset = totalNumbers - (pages.length + 1);\r\n    \r\n          switch (true) {\r\n            // handle: (1) < {5 6} [7] {8 9} (10)\r\n            case (hasLeftSpill && !hasRightSpill): {\r\n              const extraPages = range(startPage - spillOffset, startPage - 1);\r\n              pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n              break;\r\n            }\r\n    \r\n            // handle: (1) {2 3} [4] {5 6} > (10)\r\n            case (!hasLeftSpill && hasRightSpill): {\r\n              const extraPages = range(endPage + 1, endPage + spillOffset);\r\n              pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n              break;\r\n            }\r\n    \r\n            // handle: (1) < {4 5} [6] {7 8} > (10)\r\n            case (hasLeftSpill && hasRightSpill):\r\n            default: {\r\n              pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n              break;\r\n            }\r\n          }\r\n    \r\n          return [1, ...pages, totalPages];\r\n    \r\n        }\r\n    \r\n        return range(1, totalPages);\r\n    \r\n      }\r\n    \r\n      gotoPage = page => {\r\n        const { onPageChanged = f => f } = this.props;\r\n    \r\n        const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n    \r\n        const paginationData = {\r\n          currentPage,\r\n          totalPages: this.totalPages,\r\n          pageLimit: this.pageLimit,\r\n          totalRecords: this.totalRecords\r\n        };\r\n    \r\n        this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n      }\r\n    \r\n      handleClick = page => evt => {\r\n        evt.preventDefault();\r\n        this.gotoPage(page);\r\n      }\r\n    \r\n      handleMoveLeft = evt => {\r\n        evt.preventDefault();\r\n        this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\r\n      }\r\n    \r\n      handleMoveRight = evt => {\r\n        evt.preventDefault();\r\n        this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\r\n      }\r\n  \r\n  render() {\r\n\r\n    if (!this.totalRecords || this.totalPages === 1) return null;\r\n\r\n    const { currentPage } = this.state;\r\n    const pages = this.fetchPageNumbers();\r\n\r\n    return (\r\n      <Fragment>\r\n        <nav aria-label=\"Countries Pagination\">\r\n          <ul className=\"pagination\">\r\n            { pages.map((page, index) => {\r\n\r\n              if (page === LEFT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                    <span className=\"sr-only\">Previous</span>\r\n                  </a>\r\n                </li>\r\n              );\r\n\r\n              if (page === RIGHT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\r\n                    <span aria-hidden=\"true\">&raquo;</span>\r\n                    <span className=\"sr-only\">Next</span>\r\n                  </a>\r\n                </li>\r\n              );\r\n\r\n              return (\r\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\r\n                  <a className=\"page-link\" href=\"#\" onClick={ this.handleClick(page) }>{ page }</a>\r\n                </li>\r\n              );\r\n\r\n            }) }\r\n\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nPagination.propTypes = {\r\n    totalRecords: PropTypes.number.isRequired,\r\n    pageLimit: PropTypes.number,\r\n    pageNeighbours: PropTypes.number,\r\n    onPageChanged: PropTypes.func\r\n  };\r\n\r\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}