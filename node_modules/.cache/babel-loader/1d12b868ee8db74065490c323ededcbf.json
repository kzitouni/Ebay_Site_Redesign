{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // third-party\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // components\n\nimport SuccessIcon from './SuccessIcon';\nimport ErrorIcon from './ErrorIcon';\nimport InfoIcon from './InfoIcon';\nimport WarningIcon from './WarningIcon';\nimport CustomIcon from './CustomIcon';\nimport Buttons from './Buttons';\nimport Input from './Input';\nimport ValidationMessage from './ValidationMessage';\nimport Title from './Title';\nimport Content from './Content';\nimport Overlay from './Overlay'; // other\n\nimport * as styles from '../styles/SweetAlertStyles';\nimport * as Patterns from '../constants/patterns';\nvar style = styles.sweetAlert;\nvar _resetting = {};\n\nvar debugLogger = function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  } // uncomment the next line to get some debugging logs.  feel free to add more.\n  // console.log(...args);\n\n};\n\nvar SweetAlert =\n/** @class */\nfunction (_super) {\n  __extends(SweetAlert, _super);\n\n  function SweetAlert(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.unsupportedProp = function (oldProp, message) {\n      try {\n        console.warn(\"react-bootstrap-sweetalert: Unsupported prop '\" + oldProp + \"'. Please \" + message);\n      } catch (e) {// do nothing\n      }\n    };\n\n    _this.getIcon = function () {\n      switch (_this.state.type) {\n        case 'danger':\n        case 'error':\n          return React.createElement(ErrorIcon, null);\n\n        case 'warning':\n          return React.createElement(WarningIcon, null);\n\n        case 'info':\n          return React.createElement(InfoIcon, null);\n\n        case 'success':\n          return React.createElement(SuccessIcon, null);\n\n        case 'custom':\n          if (_this.props.customIcon) {\n            if (typeof _this.props.customIcon == 'string') {\n              return React.createElement(CustomIcon, {\n                iconUrl: _this.props.customIcon\n              });\n            }\n\n            return _this.props.customIcon;\n          }\n\n          return null;\n\n        default:\n          return null;\n      }\n    };\n\n    _this.onChangeInput = function (e) {\n      var target = e.target;\n\n      _this.setState({\n        inputValue: target.value,\n        showValidationMessage: false\n      });\n    };\n\n    _this.isValidInput = function () {\n      if (!_this.props.required) {\n        return true;\n      }\n\n      var regex = _this.props.validationRegex || (_this.props.inputType === 'email' ? Patterns.emailRegex : Patterns.defaultRegex);\n      return regex.test(_this.state.inputValue);\n    };\n\n    _this.isDisabled = function () {\n      return _this.props.onCancel && _this.props.disabled;\n    };\n\n    _this.onAlertClose = function (callback) {\n      _resetting[_this.state.id] = true;\n      debugLogger('onAlertClose resetting state');\n\n      _this.setState(__assign({}, SweetAlert.getDefaultState(), {\n        id: _this.state.id\n      }), function () {\n        _resetting[_this.state.id] = false;\n        callback();\n      });\n    };\n\n    _this.beforeCloseAlert = function (closingAction, callback) {\n      debugLogger('in beforeCloseAlert: setting show to false');\n\n      _this.setState({\n        show: false,\n        closingAction: closingAction\n      }, function () {\n        debugLogger('state updated', _this.state.show);\n\n        if (!_this.state.show) {\n          debugLogger('invoking callback');\n          callback();\n        }\n      });\n    };\n\n    _this.onConfirm = function (handleCloseAnimations) {\n      if (handleCloseAnimations === void 0) {\n        handleCloseAnimations = true;\n      }\n\n      if (_this.isDisabled()) {\n        return;\n      }\n\n      var isInput = _this.state.type === 'input';\n      var inputValue = _this.state.inputValue;\n\n      if (isInput && !_this.isValidInput()) {\n        _this.setState({\n          showValidationMessage: true\n        });\n\n        return;\n      }\n\n      var confirm = function () {\n        debugLogger('in confirm callback');\n\n        if (isInput) {\n          _this.onAlertClose(function () {\n            _this.props.onConfirm(inputValue);\n          });\n        } else {\n          _this.onAlertClose(function () {\n            return _this.props.onConfirm();\n          });\n        }\n      };\n\n      if (handleCloseAnimations) {\n        debugLogger('calling beforeCloseAlert');\n\n        _this.beforeCloseAlert('confirm', function () {\n          return confirm();\n        });\n      } else {\n        confirm();\n      }\n    };\n\n    _this.onCancel = function (handleCloseAnimations) {\n      if (handleCloseAnimations === void 0) {\n        handleCloseAnimations = true;\n      }\n\n      var cancel = function () {\n        _this.onAlertClose(function () {\n          if (_this.props.onCancel) {\n            _this.props.onCancel();\n          }\n        });\n      };\n\n      if (handleCloseAnimations) {\n        _this.beforeCloseAlert('cancel', function () {\n          return cancel();\n        });\n      } else {\n        cancel();\n      }\n    };\n\n    _this.onInputKeyDown = function (e) {\n      if (e.keyCode == 13) {\n        e.stopPropagation();\n\n        _this.onConfirm();\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      if (e.keyCode == 27) {\n        if (_this.props.allowEscape && _this.props.onCancel) {\n          e.stopPropagation();\n\n          _this.onCancel();\n        }\n      }\n    };\n\n    _this.onClickInside = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onClickOutside = function () {\n      if (_this.props.closeOnClickOutside && _this.props.onCancel) {\n        _this.onCancel();\n      }\n    };\n\n    if (_this.props.beforeUpdate) {\n      _this.unsupportedProp('beforeUpdate', 'use props.afterUpdate');\n    }\n\n    var newState = Object.assign(SweetAlert.getDefaultState(), {\n      hideTimeoutHandlerFunc: _this.hideTimeoutHandler.bind(_this)\n    });\n\n    if (_this.props.defaultValue != null) {\n      newState.inputValue = _this.props.defaultValue;\n    }\n\n    _this.state = newState;\n\n    _this.props.beforeMount();\n\n    return _this;\n  }\n\n  SweetAlert.prototype.componentDidMount = function () {\n    document.body.classList.add('sweetalert-overflow-hidden');\n    this.props.afterMount();\n  };\n\n  SweetAlert.generateId = function () {\n    return '' + Date.now() + Math.ceil(Math.random() * 10000000000) + Math.ceil(Math.random() * 10000000000);\n  };\n\n  SweetAlert.getDefaultState = function () {\n    return {\n      id: SweetAlert.generateId(),\n      show: true,\n      focusConfirmBtn: true,\n      focusCancelBtn: false,\n      inputValue: '',\n      showValidationMessage: false,\n      timer: null,\n      animation: \"\",\n      prevTimeout: 0,\n      closingAction: null\n    };\n  };\n\n  SweetAlert.getDerivedStateFromProps = function (nextProps, nextState) {\n    if (_resetting[nextState.id]) {\n      return {};\n    }\n\n    var newState = {};\n\n    if (nextState.type !== SweetAlert.getTypeFromProps(nextProps)) {\n      newState = __assign({}, SweetAlert.getStateFromProps(nextProps), SweetAlert.handleTimeout(nextProps, nextState.timer) // Set new timer\n      );\n    } else if (nextState.prevTimeout !== nextProps.timeout) {\n      newState = __assign({}, SweetAlert.handleTimeout(nextProps, nextState.timer) // Set new timer\n      );\n    } // No state change\n\n\n    return __assign({}, newState, SweetAlert.handleAnimState(nextProps, nextState, nextState.hideTimeoutHandlerFunc));\n  };\n\n  SweetAlert.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (this.props.beforeUpdate) this.props.beforeUpdate(prevProps, prevState);\n    this.props.afterUpdate(prevProps, prevState);\n  };\n\n  SweetAlert.prototype.componentWillUnmount = function () {\n    document.body.classList.remove('sweetalert-overflow-hidden');\n    clearTimeout(this.state.timer);\n    this.props.beforeUnmount();\n  };\n\n  SweetAlert.prototype.hideTimeoutHandler = function (time) {\n    var _this = this;\n\n    setTimeout(function () {\n      var closingAction = _this.state.closingAction;\n      /**\n       * Removing the closing action (shouldn't trigger another animation timeout)\n       */\n\n      _this.setState({\n        show: false,\n        closingAction: null\n      }, function () {\n        // handle the action that was started before the closing animation was started\n        switch (closingAction) {\n          case 'confirm':\n            _this.onConfirm(false);\n\n            break;\n\n          case 'cancel':\n            _this.onCancel(false);\n\n            break;\n\n          default:\n            break;\n        }\n      });\n    }, time);\n  };\n\n  ;\n\n  SweetAlert.handleTimeout = function (props, currentTimer) {\n    if (currentTimer) {\n      clearTimeout(currentTimer);\n    }\n\n    if (props.timeout && props.timeout > 0) {\n      var timer = setTimeout(function () {\n        return props.onConfirm();\n      }, props.timeout);\n      return {\n        timer: timer,\n        prevTimeout: props.timeout\n      };\n    }\n\n    return null;\n  };\n\n  SweetAlert.isAnimation = function (animProp) {\n    return animProp && typeof animProp !== 'boolean';\n  };\n\n  SweetAlert.animationFromProp = function (animProp) {\n    return animProp.name + ' ' + animProp.duration + 'ms';\n  };\n\n  SweetAlert.handleAnimState = function (props, state, hideTimeout) {\n    var userDefinedShow = typeof props.show === 'boolean';\n    var show = userDefinedShow && !state.closingAction ? props.show : state.show;\n    var animation = '';\n\n    if (show) {\n      if (props.openAnim) {\n        if (SweetAlert.isAnimation(props.openAnim)) {\n          animation = SweetAlert.animationFromProp(props.openAnim);\n        } else if (SweetAlert.isAnimation(SweetAlert.defaultProps.openAnim)) {\n          animation = SweetAlert.animationFromProp(SweetAlert.defaultProps.openAnim);\n        }\n      }\n    } else if (state.closingAction && props.closeAnim) {\n      var animProp = void 0;\n\n      if (SweetAlert.isAnimation(props.closeAnim)) {\n        animProp = props.closeAnim;\n      } else if (SweetAlert.isAnimation(SweetAlert.defaultProps.closeAnim)) {\n        animProp = SweetAlert.defaultProps.closeAnim;\n      }\n\n      if (animProp) {\n        animation = SweetAlert.animationFromProp(animProp);\n        hideTimeout(animProp.duration);\n        show = true;\n      }\n    }\n\n    return {\n      show: show,\n      animation: animation\n    };\n  };\n\n  ;\n\n  SweetAlert.prototype.render = function () {\n    var _this = this;\n\n    if (!this.state.show) {\n      return false;\n    }\n\n    return React.createElement(\"div\", null, React.createElement(\"style\", {\n      type: \"text/css\",\n      dangerouslySetInnerHTML: {\n        __html: \"\\n              body.sweetalert-overflow-hidden {\\n                overflow: hidden;\\n              }\\n              body .sweet-alert button {\\n                outline: none !important;\\n              }\\n            \"\n      }\n    }), React.createElement(\"style\", {\n      type: \"text/css\"\n    }, \"@-webkit-keyframes showSweetAlert {  0% {    transform: scale(0.7);    -webkit-transform: scale(0.7);  }  45% {    transform: scale(1.05);    -webkit-transform: scale(1.05);  }  80% {    transform: scale(0.95);    -webkit-tranform: scale(0.95);  }  100% {    transform: scale(1);    -webkit-transform: scale(1);  }}@keyframes showSweetAlert {  0% {    transform: scale(0.7);    -webkit-transform: scale(0.7);  }  45% {    transform: scale(1.05);    -webkit-transform: scale(1.05);  }  80% {    transform: scale(0.95);    -webkit-tranform: scale(0.95);  }  100% {    transform: scale(1);    -webkit-transform: scale(1);  }}@-webkit-keyframes hideSweetAlert {  0% {    transform: scale(1);    -webkit-transform: scale(1);  }  100% {    transform: scale(0.4);    -webkit-transform: scale(0.4);  }}@keyframes hideSweetAlert {  0% {    transform: scale(1);    -webkit-transform: scale(1);  }  100% {    transform: scale(0.4);    -webkit-transform: scale(0.4);  }}@-webkit-keyframes animateSuccessTip {  0% {    width: 0;    left: 1px;    top: 19px;  }  54% {    width: 0;    left: 1px;    top: 19px;  }  70% {    width: 50px;    left: -8px;    top: 37px;  }  84% {    width: 17px;    left: 21px;    top: 48px;  }  100% {    width: 25px;    left: 14px;    top: 45px;  }}@keyframes animateSuccessTip {  0% {    width: 0;    left: 1px;    top: 19px;  }  54% {    width: 0;    left: 1px;    top: 19px;  }  70% {    width: 50px;    left: -8px;    top: 37px;  }  84% {    width: 17px;    left: 21px;    top: 48px;  }  100% {    width: 25px;    left: 14px;    top: 45px;  }}@-webkit-keyframes animateSuccessLong {  0% {    width: 0;    right: 46px;    top: 54px;  }  65% {    width: 0;    right: 46px;    top: 54px;  }  84% {    width: 55px;    right: 0px;    top: 35px;  }  100% {    width: 47px;    right: 8px;    top: 38px;  }}@keyframes animateSuccessLong {  0% {    width: 0;    right: 46px;    top: 54px;  }  65% {    width: 0;    right: 46px;    top: 54px;  }  84% {    width: 55px;    right: 0px;    top: 35px;  }  100% {    width: 47px;    right: 8px;    top: 38px;  }}@-webkit-keyframes rotatePlaceholder {  0% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  5% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  12% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }  100% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }}@keyframes rotatePlaceholder {  0% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  5% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  12% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }  100% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }}@-webkit-keyframes animateErrorIcon {  0% {    transform: rotateX(100deg);    -webkit-transform: rotateX(100deg);    opacity: 0;  }  100% {    transform: rotateX(0deg);    -webkit-transform: rotateX(0deg);    opacity: 1;  }}@keyframes animateErrorIcon {  0% {    transform: rotateX(100deg);    -webkit-transform: rotateX(100deg);    opacity: 0;  }  100% {    transform: rotateX(0deg);    -webkit-transform: rotateX(0deg);    opacity: 1;  }}@-webkit-keyframes animateXMark {  0% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  50% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  80% {    transform: scale(1.15);    -webkit-transform: scale(1.15);    margin-top: -6px;  }  100% {    transform: scale(1);    -webkit-transform: scale(1);    margin-top: 0;    opacity: 1;  }}@keyframes animateXMark {  0% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  50% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  80% {    transform: scale(1.15);    -webkit-transform: scale(1.15);    margin-top: -6px;  }  100% {    transform: scale(1);    -webkit-transform: scale(1);    margin-top: 0;    opacity: 1;  }}@-webkit-keyframes pulseWarning {  0% {    border-color: #F8D486;  }  100% {    border-color: #F8BB86;  }}@keyframes pulseWarning {  0% {    border-color: #F8D486;  }  100% {    border-color: #F8BB86;  }}@-webkit-keyframes pulseWarningIns {  0% {    background-color: #F8D486;  }  100% {    background-color: #F8BB86;  }}@keyframes pulseWarningIns {  0% {    background-color: #F8D486;  }  100% {    background-color: #F8BB86;  }}\"), React.createElement(Overlay, {\n      show: !this.props.hideOverlay,\n      onClick: this.onClickOutside,\n      onKeyDown: this.onKeyDown\n    }, React.createElement(\"div\", {\n      style: Object.assign({}, style, this.props.style, {\n        animation: this.state.animation\n      }),\n      tabIndex: 0,\n      ref: \"container\",\n      onKeyDown: this.onKeyDown,\n      onClick: this.onClickInside,\n      className: 'sweet-alert ' + this.props.customClass\n    }, this.props.showCloseButton && this.props.onCancel && React.createElement(\"span\", {\n      className: 'btn',\n      style: Object.assign({}, styles.closeButton, this.props.style),\n      onClick: function () {\n        return _this.onCancel();\n      }\n    }, \"x\"), this.getIcon(), React.createElement(Title, null, this.props.title), React.createElement(Content, null, this.props.children), this.state.type === 'input' && React.createElement(Input, __assign({}, this.props, this.state, {\n      type: this.state.type,\n      onInputKeyDown: this.onInputKeyDown,\n      onChangeInput: this.onChangeInput\n    })), this.state.showValidationMessage && React.createElement(ValidationMessage, __assign({}, this.props)), React.createElement(Buttons, __assign({}, this.props, {\n      type: this.state.type,\n      onConfirm: this.onConfirm,\n      onCancel: this.onCancel,\n      focusConfirmBtn: this.state.focusConfirmBtn,\n      focusCancelBtn: this.state.focusCancelBtn,\n      disabled: this.isDisabled()\n    })))));\n  };\n\n  SweetAlert.propTypes = {\n    type: PropTypes.oneOf(['default', 'info', 'success', 'warning', 'danger', 'error', 'input', 'custom']),\n    // shortcut props for type\n    info: PropTypes.bool,\n    success: PropTypes.bool,\n    warning: PropTypes.bool,\n    danger: PropTypes.bool,\n    error: PropTypes.bool,\n    input: PropTypes.bool,\n    custom: PropTypes.bool,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func.isRequired,\n    confirmBtnText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n    confirmBtnBsStyle: PropTypes.string,\n    confirmBtnCssClass: PropTypes.string,\n    confirmBtnStyle: PropTypes.object,\n    cancelBtnText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n    cancelBtnBsStyle: PropTypes.string,\n    cancelBtnCssClass: PropTypes.string,\n    cancelBtnStyle: PropTypes.object,\n    btnSize: PropTypes.string,\n    customIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n    show: PropTypes.bool,\n    required: PropTypes.bool,\n    placeholder: PropTypes.string,\n    validationMsg: PropTypes.string,\n    validationRegex: PropTypes.object,\n    defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    style: PropTypes.object,\n    closeBtnStyle: PropTypes.object,\n    customClass: PropTypes.string,\n    showConfirm: PropTypes.bool,\n    showCancel: PropTypes.bool,\n    showCloseButton: PropTypes.bool,\n    allowEscape: PropTypes.bool,\n    closeOnClickOutside: PropTypes.bool,\n    hideOverlay: PropTypes.bool,\n    disabled: PropTypes.bool,\n    focusConfirmBtn: PropTypes.bool,\n    focusCancelBtn: PropTypes.bool,\n    beforeMount: PropTypes.func,\n    afterMount: PropTypes.func,\n    beforeUpdate: PropTypes.func,\n    afterUpdate: PropTypes.func,\n    beforeUnmount: PropTypes.func,\n    timeout: PropTypes.number,\n    openAnim: PropTypes.any,\n    closeAnim: PropTypes.any,\n    reverseButtons: PropTypes.bool,\n    customButtons: PropTypes.node\n  };\n  SweetAlert.defaultProps = {\n    allowEscape: true,\n    closeOnClickOutside: true,\n    inputType: 'text',\n    customClass: '',\n    validationMsg: null,\n    validationRegex: null,\n    hideOverlay: false,\n    required: true,\n    disabled: false,\n    focusConfirmBtn: true,\n    focusCancelBtn: false,\n    showCloseButton: false,\n    confirmBtnBsStyle: 'primary',\n    cancelBtnBsStyle: 'link',\n    beforeMount: function () {},\n    afterMount: function () {},\n    beforeUpdate: null,\n    afterUpdate: function () {},\n    beforeUnmount: function () {},\n    style: {},\n    closeBtnStyle: {},\n    timeout: 0,\n    openAnim: {\n      name: \"showSweetAlert\",\n      duration: 300\n    },\n    closeAnim: false,\n    reverseButtons: false\n  };\n  SweetAlert.SuccessIcon = SuccessIcon;\n  SweetAlert.ErrorIcon = ErrorIcon;\n  SweetAlert.InfoIcon = InfoIcon;\n  SweetAlert.WarningIcon = WarningIcon;\n  SweetAlert.CustomIcon = CustomIcon;\n  SweetAlert.Buttons = Buttons;\n  SweetAlert.Input = Input;\n  SweetAlert.ValidationMessage = ValidationMessage;\n  SweetAlert.Title = Title;\n  SweetAlert.Content = Content;\n\n  SweetAlert.getStateFromProps = function (props) {\n    var type = SweetAlert.getTypeFromProps(props);\n    return {\n      type: type,\n      focusConfirmBtn: props.focusConfirmBtn && type !== 'input',\n      focusCancelBtn: props.focusCancelBtn && type !== 'input'\n    };\n  };\n\n  SweetAlert.getTypeFromProps = function (props) {\n    if (props.type) return props.type;\n    if (props.secondary) return 'secondary';\n    if (props.info) return 'info';\n    if (props.success) return 'success';\n    if (props.warning) return 'warning';\n    if (props.danger || props.error) return 'danger';\n    if (props.input) return 'input';\n    if (props.custom) return 'custom';\n    return 'default';\n  };\n\n  return SweetAlert;\n}(React.Component);\n\nexport default SweetAlert;","map":null,"metadata":{},"sourceType":"module"}